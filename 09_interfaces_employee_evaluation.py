"""
‚úÖ Requisitos de la extensi√≥n:
No modificar las clases existentes (Empleado, EmpleadoTiempoCompleto, EmpleadoPorHora).

A√±adir una nueva funcionalidad que utilice:

Interfaces (clases abstractas).

Getters y setters (usando @property).

Todo debe construirse como una extensi√≥n encima del c√≥digo base.

üéØ Objetivo de la extensi√≥n
Vamos a a√±adir un sistema de evaluaci√≥n de desempe√±o para ciertos empleados, que afecte su informaci√≥n sin alterar la clase base.

üß± Estructura de la extensi√≥n
Una nueva interfaz Evaluable que define:

una propiedad desempe√±o (con getter y setter)

un m√©todo bono_por_desempe√±o()

Una nueva clase EmpleadoEvaluado, que:

recibe una instancia de un empleado existente.

expone su nombre_completo y salario delegando.

implementa la interfaz y agrega l√≥gica de evaluaci√≥n.
"""

from abc import ABC, abstractmethod

##### NO MODIFICAR!!!
class Empleado():
    def __init__(self, nombre, apellido, salario_base):
        self._nombre = nombre
        self._apellido = apellido
        self._salario_base = salario_base

    @property
    def nombre_completo(self):
        return f"{self._nombre} {self._apellido}"
    
    @property
    def salario(self):
        return self._salario_base
    
class EmpleadoTiempoCompleto(Empleado):
    def __init__(self, nombre, apellido, salario_base, bono):
        super().__init__(nombre,apellido,salario_base)
        self._bono = bono

    @property
    def salario(self):
        return self._salario_base + self._bono 
    
class EmpleadoPorHora(Empleado):
    def __init__(self, nombre, apellido, tarifa_horas, horas_trabajadas):
        super().__init__(nombre,apellido,0)
        self._tarifa_horas = tarifa_horas
        self._horas_trabajadas = horas_trabajadas

    @property
    def salario(self):
        return self._tarifa_horas * self._horas_trabajadas
        
##### NO MODIFICAR!!!        

from enum import Enum

class NivelDesempe√±o(Enum):
    ALTO = "alto"
    MEDIO = "medio"
    BAJO = "bajo"

class Evaluable(ABC):

    @property
    @abstractmethod
    def desempe√±o(self):
        pass

    @desempe√±o.setter
    @abstractmethod
    def desempe√±o(self):
        pass

    @abstractmethod
    def bono_por_desempe√±o(self):
        pass

class EmpleadoEvaluado(Evaluable):
    def __init__(self, empleado: Empleado):
        self._empleado = empleado
        self._desempe√±o = None

    @property
    def nombre_completo(self):
        return self._empleado.nombre_completo
    
    @property
    def salario(self):
        return self._empleado.salario

    @property
    def desempe√±o(self):
        return self._desempe√±o
    
    @desempe√±o.setter
    def desempe√±o(self, valor):
        if not isinstance(valor, NivelDesempe√±o):
            raise ValueError(f"El desempe√±o debe ser { [d.value for d in NivelDesempe√±o]  }")
        self._desempe√±o = valor

    def bono_por_desempe√±o(self):
        if self._desempe√±o == NivelDesempe√±o.ALTO:
            return self.salario * 0.10
        elif self._desempe√±o == NivelDesempe√±o.MEDIO:
            return self.salario * 0.05
        return 0


base = EmpleadoTiempoCompleto("Ana", "L√≥pez", 3000, 500)

evaluado = EmpleadoEvaluado(base)
evaluado.desempe√±o = NivelDesempe√±o.BAJO

print(f"{evaluado.nombre_completo}")
print(f"Salario base: {evaluado.salario}")
print(f"Desempe√±o: {evaluado.desempe√±o.value}")
print(f"Bono por desempe√±o: {evaluado.bono_por_desempe√±o()}")